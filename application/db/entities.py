import logging
import uuid
from datetime import datetime
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, ForeignKey, Boolean, Table, DateTime
from sqlalchemy.orm import relationship
#from application.session_factory import SessionFactory
#logging.basicConfig()
#logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)


"""class ID(object):
    __call__(self):
        return str(uuid4())
"""

Base = declarative_base()

user_project_role_table = Table(
    "user_project_role",
    Base.metadata,
    Column("user_id", Integer, ForeignKey("user.id")),
    Column("role_id", Integer, ForeignKey("role.id")),
    Column("project_id", Integer, ForeignKey("project.id")),
)

user_team_role_table = Table(
    "user_team_role",
    Base.metadata,
    Column("user_id", Integer, ForeignKey("user.id")),
    Column("role_id", Integer, ForeignKey("role.id")),
    Column("team_id", Integer, ForeignKey("team.id")),
)

class Entity(Base):
    """
        id: Entity id, numeric, unique for a given entity type, and autogenerated.
            Note that IDs are populated once session.flush() is performed.
    """
    __abstract__ = True

    id = Column(Integer, primary_key=True)

    def __init__(self, **kwargs):
        for k,v in kwargs.items():
            setattr(self, k, v)

    def __eq__(self, other):
        return other is not None and self.__class__ == other.__class__ and self.id == other.id

    def __hash__(self):
        return hash(f"{self.__class__.__name__}{self.id}")


class User(Entity):
    __tablename__ = "user"
    __mapper_args__ = {"concrete": True}

    user_name = Column(String(255))
    given_name = Column(String(50))
    family_name = Column(String(50))
    created_at = Column(DateTime, default=datetime.now())

    teams = relationship("Team", secondary=user_team_role_table, lazy="joined")
    projects = relationship("Project", secondary=user_project_role_table, lazy="joined")

class Team(Entity):
    __tablename__ = "team"
    __mapper_args__ = {"concrete": True}

    name = Column(String(50))
    creator_id = Column(Integer, ForeignKey("user.id") )
    created_at = Column(DateTime, default=datetime.now())

    users = relationship("User", secondary=user_team_role_table, lazy="joined")
    projects = relationship("Project", lazy="joined")

class Role(Entity):
    __tablename__ = "role"
    __mapper_args__ = {"concrete": True}

    name = Column(String(20))

class Project(Entity):
    __tablename__ = "project"
    __mapper_args__ = {"concrete": True}

    name = Column(String(50))
    creator_id = Column(Integer, ForeignKey("user.id") )
    created_at = Column(DateTime, default=datetime.now())
    team_id = Column(Integer, ForeignKey("team.id"))

    team = relationship("Team")
    users = relationship("User", secondary=user_project_role_table, lazy="joined")



